#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'pp'
require 'subtool'

options = OpenStruct.new(:delay => 1000.0)

option_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: subtool [options]'

  opts.separator ''
  opts.separator 'Specific options:'

  opts.on('-d', '--delay SECONDS',
          'Amount of seconds to add or removed. Can be formatted as a float (e.g. 3.3). Default is 1.') do |seconds|
    options.delay = Float(seconds)*1000
  end

  opts.on('-i', '--input FILENAME',
          'Input SRT filename. STDIN by default or if - is given.') do |filename|
    options.input = filename unless filename == '-'
  end

  opts.on('-o', '--output FILENAME',
          'Output SRT filename. STDOUT by default or if - is given.') do |filename|
    options.output = filename unless filename == '-'
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts

    # @TODO Put commands help
    #  command 'add' do
    #    description "Adds a delay to the srt file, making the subtitles displayed later."
    #  command 'remove' do
    #    description "Makes the subtitles displayed earlier."

    exit
  end

  # Another typical switch to print the version.
  opts.on_tail('--version', 'Show version') do
    puts Subtool::VERSION
    exit
  end
end

option_parser.order!

if ARGV.count == 0
  puts option_parser
  exit
end

commands = ARGV.dup

ARGV.replace([options.input]) if options.input
subtitles = Subtool::Import::Srt.filehandler(ARGF)

# @Todo more filters otherwise the loop won't make any sense
while commands.count > 0
  case (command = commands.shift.downcase)
    when 'add', 'remove'
      if commands[0] && commands[0].match(/^\d+(?:\.\d+)?$/)
        delay = Float(commands.shift)*1000
      else
        delay = options.delay
      end
      Subtool::Filter::Delay.add_to(subtitles, command == 'add' ? delay : -delay)
  end
end

# output
if options.output
  Subtool::Export::Srt.file(options.output, subtitles)
else
  Subtool::Export::Srt.stdout(subtitles)
end
